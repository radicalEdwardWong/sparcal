%{
/*
 * parser.gram
 */

#define YYSTYPE PPTreeNode
extern char* textline; // defined in scanner.specs
%}

%token PROGRAMTK
%token BEGINTK
%token ENDTK
%token SCTK
%token ASGTK
%token DOTTK
%token IDENTIFIERTK
%token INTLITERALTK
%token REALLITERALTK
%token INTWRITETK
%token REALWRITETK
%token LPARENTK
%token RPARENTK

%start Program
%%

Program:
	PROGRAMTK Identifier SCTK
	Block
		{PProgram pgm = new Program($2, $4);}
	;
Block:
	BEGINTK
		StatementSeq
	ENDTK DOTTK
		{$$ = new Block($2);}
	;
StatementSeq:
	Statement
		{$$ = new StatementSeq($1);}
	| StatementSeq SCTK Statement
		{$$ = PStatementSeq($1)->append($3);}
	;
Statement:
	/* empty */
		{$$ = new EmptyStmt;}
	| IntAssignmentStmt
	| RealAssignmentStmt
	| IntWriteStmt
	| RealWriteStmt
	;
IntAssignmentStmt:
	Identifier ASGTK IntExpr
		{$$ = new IntAssignmentStmt($1, $3, textline);}
	;
RealAssignmentStmt:
	Identifier ASGTK RealExpr
		{$$ = new RealAssignmentStmt($1, $3, textline);}
	;
IntWriteStmt:
	INTWRITETK LPARENTK IntExpr RPARENTK
		{$$ = new IntWriteStmt($3,textline);}
	;
RealWriteStmt:
	REALWRITETK LPARENTK RealExpr RPARENTK
		{$$ = new RealWriteStmt($3,textline);}
	;
IntExpr:
	IntFactor
	;
RealExpr:
	RealFactor
	;
IntFactor:
	Integer
		{$$ = new IntFactor($1);}
	| Identifier
		{$$ = new IntVarAccessFactor($1);}
	;
RealFactor:
	Real
		{$$ = new RealFactor($1);}
	| Identifier
		{$$ = new RealVarAccessFactor($1);}
	;
Identifier:
	IDENTIFIERTK
			{$$ = new Ident();}
	;
Integer:
	INTLITERALTK
		{$$ = new IntLiteral();}
	;
Real:
	REALLITERALTK
		{$$ = new RealLiteral();}
	;
